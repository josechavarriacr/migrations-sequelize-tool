const dotenv = require('dotenv-safe')
const { join } = require('path')

const env = process.env.ENV_VARS || process.env.NODE_ENV || 'development'

dotenv.config({
  path: join(__dirname, 'env', `.env.${env}`),
  sample: join(__dirname, 'env', '.env.example'),
  allowEmptyValues: true,
})

const variables = {
  adminToken: process.env.ADMIN_TOKEN,
  appName: process.env.APP_NAME,
  env,
  secrets: {
    jwt: process.env.JWT_SECRET,
    encryptionKey: process.env.ENCRYPTION_KEY,
    encryptionVector: process.env.ENCRYPTION_VECTOR,
  },
  apis: {
    currentApi: process.env.CURRENT_API || null,
    gateway: {
      name: process.env.API_GATEWAY_NAME,
      token: process.env.API_GATEWAY_TOKEN,
      path: process.env.API_GATEWAY_PATH,
      ip: process.env.API_GATEWAY_IP,
      port: parseInt(process.env.API_GATEWAY_PORT, 10),
      route: process.env.API_GATEWAY_ROUTE,
      requestsLogger: process.env.API_GATEWAY_LOGGER === 'true',
      errorLogger: process.env.API_GATEWAY_ERROR_LOGGER === 'true',
    },
    core: {
      name: process.env.API_NAME,
      token: process.env.API_TOKEN,
      path: process.env.API_PATH,
      ip: process.env.API_IP,
      port: parseInt(process.env.API_PORT, 10),
      route: process.env.API_ROUTE,
      frontEnd: 'home-web',
      requestsLogger: process.env.API_LOGGER === 'true',
      errorLogger: process.env.API_ERROR_LOGGER === 'true',
      modelsFolders: process.env.API_MODELS_FOLDERS,
    },
    cdn: {
      name: process.env.CDN_NAME,
      token: process.env.CDN_TOKEN,
      path: process.env.CDN_PATH,
      ip: process.env.CDN_IP,
      port: parseInt(process.env.CDN_PORT, 10),
      route: process.env.CDN_ROUTE,
      drive: process.env.CDN_DRIVE,
      requestsLogger: process.env.CDN_LOGGER === 'true',
      errorLogger: process.env.CDN_ERROR_LOGGER === 'true',
    },
    crearempresa: {
      name: process.env.CREAR_EMPRESA_API_NAME,
      token: process.env.CREAR_EMPRESA_API_TOKEN,
      path: process.env.CREAR_EMPRESA_API_PATH,
      ip: process.env.CREAR_EMPRESA_API_IP,
      port: parseInt(process.env.CREAR_EMPRESA_API_PORT, 10),
      route: process.env.CREAR_EMPRESA_API_ROUTE,
      requestsLogger: process.env.CREAR_EMPRESA_API_LOGGER === 'true',
      errorLogger: process.env.CREAR_EMPRESA_API_ERROR_LOGGER === 'true',
      frontEnd: 'user-web',
      modelsFolders: process.env.CREAR_EMPRESA_API_MODELS_FOLDERS,
    },
    sfe: {
      name: process.env.SFE_API_NAME,
      token: process.env.SFE_API_TOKEN,
      path: process.env.SFE_API_PATH,
      ip: process.env.SFE_API_IP,
      port: parseInt(process.env.SFE_API_PORT, 10),
      route: process.env.SFE_API_ROUTE,
      requestsLogger: process.env.SFE_API_LOGGER === 'true',
      errorLogger: process.env.SFE_API_ERROR_LOGGER === 'true',
      frontEnd: 'phitosanitary-web',
      modelsFolders: process.env.SFE_API_MODELS_FOLDERS,
    },
    migracion: {
      name: process.env.MIGRACION_API_NAME,
      token: process.env.MIGRACION_API_TOKEN,
      path: process.env.MIGRACION_API_PATH,
      ip: process.env.MIGRACION_API_IP,
      port: parseInt(process.env.MIGRACION_API_PORT, 10),
      route: process.env.MIGRACION_API_ROUTE,
      requestsLogger: process.env.MIGRACION_API_LOGGER === 'true',
      errorLogger: process.env.MIGRACION_API_ERROR_LOGGER === 'true',
      frontEnd: 'migratory-web-citizen',
      modelsFolders: process.env.MIGRACION_API_MODELS_FOLDERS,
    },
    tdcar: {
      name: process.env.TDCAR_API_NAME,
      token: process.env.TDCAR_API_TOKEN,
      path: process.env.TDCAR_API_PATH,
      ip: process.env.TDCAR_API_IP,
      port: parseInt(process.env.TDCAR_API_PORT, 10),
      route: process.env.TDCAR_API_ROUTE,
      requestsLogger: process.env.TDCAR_API_LOGGER === 'true',
      errorLogger: process.env.TDCAR_API_ERROR_LOGGER === 'true',
      modelsFolders: process.env.TDCAR_API_MODELS_FOLDERS,
    },
    sso: {
      name: process.env.SSO_API_NAME,
      token: process.env.SSO_API_TOKEN,
      path: process.env.SSO_API_PATH,
      id: process.env.SSO_API_IP,
      port: parseInt(process.env.SSO_API_PORT, 10),
      route: process.env.SSO_API_ROUTE,
      requestsLogger: process.env.SSO_API_LOGGER === 'true',
      errorLogger: process.env.SSO_API_ERROR_LOGGER === 'true',
      modelsFolders: process.env.SSO_API_MODELS_FOLDERS,
    },
  },
  bff: {
    core: {
      name: process.env.API_NAME,
      token: process.env.API_TOKEN,
      path: process.env.API_PATH,
      ip: process.env.API_IP,
      port: parseInt(process.env.API_PORT, 10),
      route: process.env.API_ROUTE,
      prefix: process.env.API_PREFIX,
      prefixRewrite: process.env.API_PREFIX_REWRITE,
    },
    cdn: {
      name: process.env.CDN_NAME,
      token: process.env.CDN_TOKEN,
      path: process.env.CDN_PATH,
      ip: process.env.CDN_IP,
      port: parseInt(process.env.CDN_PORT, 10),
      route: process.env.CDN_ROUTE,
      prefix: process.env.CDN_PREFIX,
      prefixRewrite: process.env.CDN_PREFIX_REWRITE,
    },
    crearempresa: {
      name: process.env.CREAR_EMPRESA_API_NAME,
      token: process.env.CREAR_EMPRESA_API_TOKEN,
      path: process.env.CREAR_EMPRESA_API_PATH,
      ip: process.env.CREAR_EMPRESA_API_IP,
      port: parseInt(process.env.CREAR_EMPRESA_API_PORT, 10),
      route: process.env.CREAR_EMPRESA_API_ROUTE,
      prefix: process.env.CREAR_EMPRESA_BFF_PREFIX,
      prefixRewrite: process.env.CREAR_EMPRESA_BFF_PREFIX_REWRITE,
    },
    sfe: {
      name: process.env.SFE_API_NAME,
      token: process.env.SFE_API_TOKEN,
      path: process.env.SFE_API_PATH,
      ip: process.env.SFE_API_IP,
      port: parseInt(process.env.SFE_API_PORT, 10),
      route: process.env.SFE_API_ROUTE,
      prefix: process.env.SFE_BFF_PREFIX,
      prefixRewrite: process.env.SFE_BFF_PREFIX_REWRITE,
    },
    migracion: {
      name: process.env.MIGRACION_API_NAME,
      token: process.env.MIGRACION_API_TOKEN,
      path: process.env.MIGRACION_API_PATH,
      ip: process.env.MIGRACION_API_IP,
      port: parseInt(process.env.MIGRACION_API_PORT, 10),
      route: process.env.MIGRACION_API_ROUTE,
      prefix: process.env.MIGRACION_BFF_PREFIX,
      prefixRewrite: process.env.MIGRACION_BFF_PREFIX_REWRITE,
    },
    tdcar: {
      name: process.env.TDCAR_API_NAME,
      token: process.env.TDCAR_API_TOKEN,
      path: process.env.TDCAR_API_PATH,
      ip: process.env.TDCAR_API_IP,
      port: parseInt(process.env.TDCAR_API_PORT, 10),
      route: process.env.TDCAR_API_ROUTE,
      prefix: process.env.TDCAR_BFF_PREFIX,
      prefixRewrite: process.env.TDCAR_BFF_PREFIX_REWRITE,
    },
  },
  dbs: {
    currentDB: process.env.CURRENT_DATABASE,
    currentFolders: [],
    postgres: {
      username: process.env.POSTGRES_USERNAME,
      password: process.env.POSTGRES_PASSWORD,
      database: process.env.POSTGRES_DATABASE,
      host: process.env.POSTGRES_HOST,
      port: process.env.PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    crearempresa: {
      username: process.env.CREAR_EMPRESA_POSTGRES_USERNAME,
      password: process.env.CREAR_EMPRESA_POSTGRES_PASSWORD,
      database: process.env.CREAR_EMPRESA_POSTGRES_DATABASE,
      host: process.env.CREAR_EMPRESA_POSTGRES_HOST,
      port: process.env.CREAR_EMPRESA_POSTGRES_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    sfe: {
      username: process.env.SFE_USERNAME,
      password: process.env.SFE_PASSWORD,
      database: process.env.SFE_DATABASE,
      host: process.env.SFE_HOST,
      port: process.env.SFE_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    migracion: {
      username: process.env.MIGRACION_POSTGRES_USERNAME,
      password: process.env.MIGRACION_POSTGRES_PASSWORD,
      database: process.env.MIGRACION_POSTGRES_DATABASE,
      host: process.env.MIGRACION_POSTGRES_HOST,
      port: process.env.MIGRACION_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    tdcar: {
      username: process.env.TDCAR_POSTGRES_USERNAME,
      password: process.env.TDCAR_POSTGRES_PASSWORD,
      database: process.env.TDCAR_POSTGRES_DATABASE,
      host: process.env.TDCAR_POSTGRES_HOST,
      port: process.env.TDCAR_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    demo: {
      username: process.env.DEMO_USERNAME,
      password: process.env.DEMO_PASSWORD,
      database: process.env.DEMO_DATABASE,
      host: process.env.DEMO_HOST,
      port: process.env.DEMO_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
    sso: {
      username: process.env.SSO_POSTGRES_USERNAME,
      password: process.env.SSO_POSTGRES_PASSWORD,
      database: process.env.SSO_POSTGRES_DATABASE,
      host: process.env.SSO_POSTGRES_HOST,
      port: process.env.SSO_PORT,
      dialect: 'postgres',
      max_connections: parseInt(process.env.POSTGRES_MAX_CONNECTIONS, 10),
      min_connections: parseInt(process.env.POSTGRES_MIN_CONNECTIONS, 10),
      idle_timeout: parseInt(process.env.POSTGRES_IDLE_TIMEOUT, 10),
      aquire_timeout: parseInt(process.env.POSTGRES_AQUIRE_TIMEOUT, 10),
    },
  },
  wsdl: {
    host: process.env.WSDL_HOST,
  },
  payment: {
    route: process.env.PAYMENT_ROUTE,
    electronicBillRoute: process.env.ELECTRONIC_BILL_ROUTE,
    procedureNameElectronicBill: process.env.PROCEDURE_NAME_ELECTRONIC_BILL,
  },
  externalapi: {
    route: process.env.EXTERNAL_API_ROUTE,
  },
  apps: {
    'user-web': {
      port: parseInt(process.env.USER_WEB_PORT, 10),
      route: process.env.USER_WEB_ROUTE,
      subDirectory: process.env.USER_WEB_SUBDIRECTORY,
    },
    'migratory-web-citizen': {
      port: parseInt(process.env.MIGRATORY_WEB_CITIZEN_PORT, 10),
      route: process.env.MIGRATORY_WEB_CITIZEN_ROUTE,
      subDirectory: process.env.MIGRATORY_WEB_CITIZEN_SUBDIRECTORY,
    },
    'home-web': {
      port: parseInt(process.env.HOME_WEB_PORT, 10),
      route: process.env.HOME_WEB_ROUTE,
    },
    'operator-web': {
      port: parseInt(process.env.OPERATOR_WEB_PORT, 10),
      route: process.env.OPERATOR_WEB_ROUTE,
      subDirectory: process.env.OPERATOR_WEB_SUBDIRECTORY,
    },
    'sfe-citizen-web': {
      port: parseInt(process.env.SFE_CITIZEN_WEB_PORT, 10),
      route: process.env.SFE_CITIZEN_WEB_ROUTE,
      subDirectory: process.env.SFE_CITIZEN_WEB_SUBDIRECTORY,
    },
  },
  digitalSignature: {
    host: process.env.DIGITAL_SIGNATURE_HOST,
    secret: process.env.DIGITAL_SIGNATURE_SECRET,
    secretPrivate: process.env.DIGITAL_SIGNATURE_SECRET_PRIVATE,
    key: process.env.DIGITAL_SIGNATURE_KEY,
    endpoint: process.env.DIGITAL_SIGNATURE_ENDPOINT,
    verification_endpoint: process.env.DIGITAL_SIGNATURE_ENDPOINT_VERIFICATION,
    checksum: process.env.DIGITAL_SIGNATURE_CHECKSUM,
    validateCertificate:
      process.env.DIGITAL_SIGNATURE_VALIDATECERTIFICATE === 'true',
    validateCertificateEnpoint:
      process.env.DIGITAL_SIGNATURE_VALIDATECERTIFICATE_ENDPOINT,
    identificationsIgnore: process.env.DIGITAL_SIGNATURE_IDENTIFICATIONSIGNORE,
  },
  mail: {
    host: process.env.MAIL_CONFIG_HOST,
    port: process.env.MAIL_CONFIG_PORT,
    secure: process.env.MAIL_CONFIG_SECURE,
    pool: process.env.MAIL_CONFIG_POOL,
    maxConnections: process.env.MAIL_CONFIG_MAXCONNECTIONS,
    from: process.env.MAIL_CONFIG_FROM,
    to: process.env.MAIL_CONFIG_TO,
    user: process.env.MAIL_CONFIG_USER,
    pass: process.env.MAIL_CONFIG_PASSWORD,
    rejectUnauthorized: process.env.MAIL_CONFIG_TLS_REJECTUNAUTHORIZED,
    attempts: process.env.MAIL_ATTEMPTS,
    revisionFrecuency: process.env.MAIL_REVISIONFRECUENCY,
    revisionLimit: process.env.MAIL_REVISIONLIMIT,
    connectionTimeout: process.env.MAIL_CONNECTIONTIMEOUT,
    greetingTimeout: process.env.MAIL_GREETINGTIMEOUT,
  },
  bccr: {
    name: process.env.BCCR_NAME,
    email: process.env.BCCR_EMAIL,
    token: process.env.BCCR_TOKEN,
    indicator: process.env.BCCR_INDICATOR,
    path: process.env.BCCR_PATH,
  },
  rabbit: {
    path: process.env.RABBIT_PATH,
    username: process.env.RABBIT_USERNAME,
    password: process.env.RABBIT_PASSWORD,
    port: process.env.RABBIT_PORT,
    protocol: process.env.RABBIT_PROTOCOL,
  },
  nationalRegistry: {
    userNationalRegistry: process.env.USER_NATIONALREGISTRY,
    passwordNationalRegistry: process.env.PASSWORD_NATIONALREGISTRY,
    userAttachmentService: process.env.USER_ATTACHMENTSERVICE,
    passwordAttachmentService: process.env.PASSWORD_ATTACHMENTSERVICE,
  },
  oracle: {
    user: process.env.ORACLE_GDDB_USER,
    password: process.env.ORACLE_GDDB_PASSWORD,
    connectString: process.env.ORACLE_GDDB_CONNECTSTRING,
  },
  queues: {
    societyQueue: process.env.SOCIETY_QUEUE,
    societyAttachmentQueue: process.env.SOCIETY_ATTACHMENT_QUEUE,
    edictoQueue: process.env.EDICTO_QUEUE,
    legalStatusQueue: process.env.LEGAL_STATUS_QUEUE,
  },
  fireBase: {
    host: process.env.FIREBASE_HOST,
    serverKey: process.env.FIREBASE_SERVER_KEY,
  },
  recaptcha: {
    secret: process.env.RECAPTCHA_SECRET_KEY,
    uri: process.env.URI,
  },
  twt: {
    expiresIn: process.env.EXPIRES_IN,
    linkPasswordExpiresIn: process.env.RESETPASSWORD_LINK_EXPIRES_IN,
    linkExpiresIn: process.env.ACTIVATION_LINK_EXPIRES_IN,
    operatorExpiresIn: process.env.OPERATOR_EXPIRES_IN,
    clientExpiresIn: process.env.CLIENT_EXPIRES_IN,
  },
  cookies: {
    key: process.env.COOKIES_TOKEN_KEY,
    clientExpiresIn:
      1000 * 60 * 60 * parseInt(process.env.COOKIES_CLIENT_EXPIRES_IN, 10),
    operatorExpiresIn:
      1000 * 60 * 60 * parseInt(process.env.COOKIES_OPERATOR_EXPIRES_IN, 10),
    domain: process.env.COOKIES_DOMAIN,
    secure: process.env.COOKIES_SECURE === 'true',
    csrfKey: process.env.COOKIES_CSRF_KEY,
  },
  logged: {
    token: process.env.LOGGED_TOKEN,
  },
  generalDirectorateMigrationForeigners: {
    user: process.env.SINEX_USER,
    password: process.env.SINEX_PASSWORD,
    api: {
      name: process.env.SINEX_API_NAME,
      path: process.env.SINEX_API_PATH,
      ip: process.env.SINEX_API_IP,
      port: parseInt(process.env.SINEX_API_PORT, 10),
      route: process.env.SINEX_API_ROUTE,
      vefiryRoute: process.env.SINEX_API_VEFIFY_SERVICE_ROUTE,
    },
  },
  globalConfig: {
    hasProcedureActive: process.env.CHECK_PENDING_PROCEDURES,
    validateDeposits: process.env.CHECK_DEPOSITS,
  },
  redisConfig: {
    useRedis: process.env.USE_REDIS,
    port: process.env.REDIS_PORT,
    host: process.env.REDIS_HOST,
    password: process.env.REDIS_PASSWORD,
  },
  redisConfigSSO: {
    useRedis: process.env.SSO_USE_REDIS,
    port: process.env.SSO_REDIS_PORT,
    host: process.env.SSO_REDIS_HOST,
    password: process.env.SSO_REDIS_PASSWORD,
  },
  password: {
    expiresIn: process.env.PASSWORD_EXPIRATION,
  },
  task: {
    originurl: process.env.TASK_ORIGIN_URL,
  },
  monitoring: {
    apm: {
      server: process.env.MONITORING_APM_SERVER,
      secret: process.env.MONITORING_APM_SECRET,
      enabled: process.env.MONITORING_APM_ENABLED === 'true',
    },
  },
}

if (variables.apis.currentApi) {
  // eslint-disable-next-line no-nested-ternary
  variables.dbs.currentFolders = variables.apis[variables.apis.currentApi]
    ? variables.apis[variables.apis.currentApi].modelsFolders
      ? variables.apis[variables.apis.currentApi].modelsFolders.split(',')
      : null || []
    : []
}

module.exports = variables
